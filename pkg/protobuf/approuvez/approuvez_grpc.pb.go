// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package approuvez

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ApprouvezClient is the client API for Approuvez service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApprouvezClient interface {
	NewSession(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Session, error)
	CreateStream(ctx context.Context, in *SlackUserRequest, opts ...grpc.CallOption) (Approuvez_CreateStreamClient, error)
}

type approuvezClient struct {
	cc grpc.ClientConnInterface
}

func NewApprouvezClient(cc grpc.ClientConnInterface) ApprouvezClient {
	return &approuvezClient{cc}
}

func (c *approuvezClient) NewSession(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Session, error) {
	out := new(Session)
	err := c.cc.Invoke(ctx, "/approuvez.Approuvez/NewSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *approuvezClient) CreateStream(ctx context.Context, in *SlackUserRequest, opts ...grpc.CallOption) (Approuvez_CreateStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Approuvez_ServiceDesc.Streams[0], "/approuvez.Approuvez/CreateStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &approuvezCreateStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Approuvez_CreateStreamClient interface {
	Recv() (*SlackUserResponse, error)
	grpc.ClientStream
}

type approuvezCreateStreamClient struct {
	grpc.ClientStream
}

func (x *approuvezCreateStreamClient) Recv() (*SlackUserResponse, error) {
	m := new(SlackUserResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ApprouvezServer is the server API for Approuvez service.
// All implementations must embed UnimplementedApprouvezServer
// for forward compatibility
type ApprouvezServer interface {
	NewSession(context.Context, *Empty) (*Session, error)
	CreateStream(*SlackUserRequest, Approuvez_CreateStreamServer) error
	mustEmbedUnimplementedApprouvezServer()
}

// UnimplementedApprouvezServer must be embedded to have forward compatible implementations.
type UnimplementedApprouvezServer struct {
}

func (UnimplementedApprouvezServer) NewSession(context.Context, *Empty) (*Session, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewSession not implemented")
}
func (UnimplementedApprouvezServer) CreateStream(*SlackUserRequest, Approuvez_CreateStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateStream not implemented")
}
func (UnimplementedApprouvezServer) mustEmbedUnimplementedApprouvezServer() {}

// UnsafeApprouvezServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApprouvezServer will
// result in compilation errors.
type UnsafeApprouvezServer interface {
	mustEmbedUnimplementedApprouvezServer()
}

func RegisterApprouvezServer(s grpc.ServiceRegistrar, srv ApprouvezServer) {
	s.RegisterService(&Approuvez_ServiceDesc, srv)
}

func _Approuvez_NewSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApprouvezServer).NewSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/approuvez.Approuvez/NewSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApprouvezServer).NewSession(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Approuvez_CreateStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SlackUserRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ApprouvezServer).CreateStream(m, &approuvezCreateStreamServer{stream})
}

type Approuvez_CreateStreamServer interface {
	Send(*SlackUserResponse) error
	grpc.ServerStream
}

type approuvezCreateStreamServer struct {
	grpc.ServerStream
}

func (x *approuvezCreateStreamServer) Send(m *SlackUserResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Approuvez_ServiceDesc is the grpc.ServiceDesc for Approuvez service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Approuvez_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "approuvez.Approuvez",
	HandlerType: (*ApprouvezServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewSession",
			Handler:    _Approuvez_NewSession_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateStream",
			Handler:       _Approuvez_CreateStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/protobuf/approuvez/approuvez.proto",
}
